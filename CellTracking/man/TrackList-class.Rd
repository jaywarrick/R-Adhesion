% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/TrackList.R
\docType{class}
\name{TrackList-class}
\alias{TrackList}
\alias{TrackList-class}
\title{Class representing a list of Track objects. This class is used to do track-wise
data manipulations (e.g., sweep fitting)}
\description{
Class representing a list of Track objects. This class is used to do track-wise
data manipulations (e.g., sweep fitting)
}
\section{Fields}{

\describe{
\item{\code{tracks}}{list of Track objects}

\item{\code{sin}}{boolean Whether the tracks are sinusoidal or triangular}

\item{\code{fi}}{numeric The initial frequency of the sweep}

\item{\code{ff}}{numeric The final frequency of the sweep}

\item{\code{phaseShift}}{numeric The phase shift of the sweep}

\item{\code{t0_Frame}}{numeric The frame associated with time=0 of the sweep}

\item{\code{timePerFrame}}{numeric The time per frame of the data in seconds}

\item{\code{sweepDurtion}}{numeric The time duration of the sweep in seconds}

\item{\code{tAll}}{numeric vector The vector of times associate with 'allFrames'}

\item{\code{allFrames}}{numeric vector The vector containing a complete list of frame numbers existing in the data set}

\item{\code{validFrames}}{numeric vector The subset of 'allFrames' which are set as valid using 'setValidFrames'}
}}
\section{Methods}{

\describe{
\item{\code{addTrackPoint(id, x, y, frame)}}{#' Add the given point (x, y, frame) to the track associated with the provided ID
#' This is useful for building a TrackList one point at a time instead via initialization with a file
#' @param id numeric The ID number of the track of interest
#' @param x numeric The x position of the point
#' @param y numeric The y position of the point
#' @param frame numeric The frame number of the point}

\item{\code{applyToTracks(fun, ...)}}{#' Apply the provided function to alter each track, replacing the exisitng tracks with the altered tracks
#' @param fun function The function to apply
#' @param ... additional arguments to pass to fun}

\item{\code{calculateVelocities()}}{#' Call the 'calulateVelocities' method on all Track objects in the TrackList
#' This results in calculating the point-to-point instantaneous velocities of each track (i.e., no smoothing)}

\item{\code{callTrackFun(funName, ...)}}{#' Call a Track method/function on each track in the TrackList
#' @param funName string The name of the Track function to call on each Track
#' @param ... additional arguments to pass to the called function}

\item{\code{filterTracks(fun, ...)}}{#' Filter tracks using the provided function that returns T or F when provided a track as the first argument
#' @param fun function The filtering function that returns T or F for each Track individually
#' @param ... additional arguments to fun}

\item{\code{getAllFrames()}}{#' @return The complete ordered list of frames that exist within the TrackList}

\item{\code{getMatrix(slot = "vx", validOnly = FALSE)}}{#' Get a matrix of the tracklist data. Track id's are rows while
#' frame numbers are columns. Use the matrix form of TrackList to do
#' bulk operations such as determining the sse of all the data to a
#' single curve.
#' @param slot string The name of the column in Track$points for which to make a matrix of data for
#' @param validOnly boolean whether to make the matrix for valid frames only - defualt=FALSE}

\item{\code{getPercentAdhered(velocityThreshold = 3)}}{#' @param velocityThrehsold numeric The pixels per second below which (exclusive) a cell is considered adhered - default=3 [pixels/second]
#' @return Return a dataframe with columns of 'time' and 'percentAdhered'}

\item{\code{getProp(fun = function(x) {     return(x$length()) }, ...)}}{#' Apply the given function to all tracks, summarizing the results in a list
#' @param id numeric the ID number of the track of interest}

\item{\code{getTAll()}}{#' @return The times associated with each frame that exists within the TrackList}

\item{\code{getTrack(id)}}{#' Get the track associated with the provided ID
#' @param id numeric the ID number of the track of interest}

\item{\code{getValidTimes()}}{#' @return The times associated with the valid frames of this TrackList}

\item{\code{getWindowWidths(fit, dist, maxWidth)}}{#' Calculate the appropriate window widths for calculating velocity
#' @param fit The fit results returned by 'getBulkPhaseShift'
#' @param dist The number of pixels that we would like to see (if possible) the particle/cell move before estimating velocity
#' @param maxWidth numeric The maximum number of FRAMES that should be averaged together to estimate velocity (i.e., averaging is good up to a point where it just increases compuation time)
#'
#' Underlying Calculations: v represents the velocity calculated over a single period. Thus, the cell should travel
#' 4*A units of distance per period. This is used to estimate the velocity of the cell
#' using the fit. Therefore, the expected distance the cell will travel between frames is
#' v*dt where dt is the time between the frames of interest. Thus, if we would like to
#' quantify velocity over a travel distance of 10 pixels (i.e., dist=10), then we can take
#' dist/v*dt to get the number of frames (i.e., dt's) needed to cover 10 pixels. However, if maxWidth
#' is exceeded, maxWidth is returned. dt could be variable over time depending on frame sampling rates etc.
#' approximate a dt for each index based on diff's. Repeat last value at end to create a dt
#' vector that is the same as the tracks$tAll vector}

\item{\code{initializeWithJEXROIFile(file = NULL, sin = FALSE, fi, ff, t0_Frame = 1,
  sweepDuration = 500, timePerFrame)}}{#' Initialize the TrackList with a JEXROI file that has been 'tracked' already (i.e the
#' id's of points have already been linked through time using a function like LAP Tracker)}

\item{\code{length()}}{#' Return the number of tracks in this TrackList}

\item{\code{plotTrackList(slot = "vx", fun = NULL, rel = FALSE, ...)}}{#' Plot all the values of the provided 'slot' for all tracks on a single plot.
#' @param slot string Name of the column within the Track$points to plot on the Y-axis (options are x, y, t, frame, vx, vy and potentially vxs and vys smoothed velocities, X-axis is always 't' with this function)
#' @param fun function A function to transform the slot data from each track before plotting (e.g., to scale between pixels per second velocity to microns per second velocity)
#' @param rel boolean Whether to plot the slot relative to its mean}

\item{\code{removeTrack(id)}}{#' Remove the track associated with the provided ID
#' @param id numeric the ID number of the track of interest}

\item{\code{setSweepParams(sin, fi, ff, t0_Frame, timePerFrame, sweepDuration)}}{#' Set the sweep parameters used to predict particle motion during a log frequency sweep
#' @param sin boolean Whether the tracks are sinusoidal or triangular
#' @param fi numeric The initial frequency of the sweep
#' @param ff numeric The final frequency of the sweep
#' @param t0_Frame numeric The frame associated with time=0 of the sweep
#' @param timePerFrame numeric The time per frame of the data in seconds
#' @param sweepDurtion numeric The time duration of the sweep in seconds
#' The phase shift is not set here as that is determined using the getBulkPhaseShift method}

\item{\code{setTrack(newTrack)}}{#' Set the given track within the TrackList. Any track with the same ID
#' is replaced
#' @param newTrack Track the track to put into the list/set}

\item{\code{setValidFrames(fit, validStart = 0.01, validEnd = 0.99)}}{#' Takes the fit and determines where the cells switch directions
#'
#' 'validStart' and 'validEnd' represent precentages. In other words, after the switch in direction,
#' valid points start at 'validStart' % of the way to the next switch in direction while 'validEnd'
#' occurs 'validEnd' % of the way to the that same next switch in direction.
#'
#' This filter is good for removing inaccurate values of the velocity when using a triangle waveform because
#' the estimate of velocity will be artificially be lower due to sample aliasing of particle motion.
#' Possible values are 0, 1, 2, and 3 for inflectionPtsToFilter. Multiple at once can be provided.
#' 0 Represents the upward zero-crossing of the position and max positive velocity
#' 1 Represents the max position and downward zero-crossing of the velocity
#' 2 Represents the downward zero-crossing of the position and min (i.e most negative) velocity
#' 4 Represents the min (i.e., most negative) position and upward zero-crossing of the velocity
#'
#' 'inflectionPtsToFilter' refers to the first point of the numbered sections (i.e., 1 refers to the max point)
#' Thus if 1 is included in 'inflectionPtsToFilter', points adjacent to this point will be considered for wobble and filtered.
#'
#' We use 'inflectionPtsToFilter' of c(1,3) to mark the points at which the flow switches direction}

\item{\code{smoothVelocities(fit, dist, maxWidth)}}{#' Call the 'smoothVelocities' method on all the Track objects in the TrackList
#' @param fit The fit results returned from 'getBulkPhaseShift' fitting function
#' @param dist numeric The number of pixels of motion that should be observed before estimating the velocity}

\item{\code{sortTracks(fun = function(x) {     return(x$length()) }, decreasing = TRUE,
  ...)}}{#' Sort the track according to the function provided. The function should
#' take a track as its first argument and return a sortable value for sorting
#' The tracks are then sorted in the TrackList based on these values
#' @param fun function The function to determine a value for sorting tracks - default=function(x){return(x$length())} (thus sorting by length)
#' @param decreasing boolean whether to sort in increasing or decreasing order}
}}

