plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)])
}
}
plotData(dataNames, col=col, lty=lty, PEG=TRUE)
x0_y0$plotTrackList()
x0_y0_c$plotTrackList()
x0_y1_c$plotTrackList()
x0_y2_c$plotTrackList()
rm(list=c('x0_y0','x0_y1','x0_y2'))
results <- list()
for(wellName in wellNames)
{
wellName2 <- paste0(wellName, '_c')
load(paste0(path, wellName2, '.RData'))
assign(wellName2, get(wellName)$copy())
results[[wellName2]] <- get(wellName2)$getPercentAdhered()
pdf(file=paste0(path,wellName2,'_PercentAdhered.pdf'), width=6, height=3.5)
plot(results[[wellName2]]$time, results[[wellName2]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName2, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
load(paste0(path, wellName, '.RData'))
assign(wellName, get(wellName)$copy())
results[[wellName]] <- get(wellName)$getPercentAdhered()
pdf(file=paste0(path,wellName,'_PercentAdhered.pdf'), width=6, height=3.5)
plot(results[[wellName]]$time, results[[wellName]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
}
x0_y0_c$plotTrackList()
x0_y0_c$plotTrackList()
x0_y1_c$plotTrackList()
x0_y2_c$plotTrackList()
load(paste0(path, 'x0_y2_c', '.RData'))
x0_y2_c$plotTrackList()
load(paste0(path, 'x0_y0_c', '.RData'))
x0_y0_c$plotTrackList()
load('/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/x0_y2.RData')
rm('x0_y2')
rm('x0_y2_c')
load('/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/x0_y2.RData')
load('/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/x0_y2_c.RData')
load('/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/x0_y2_c.RData')
x0_y2_c <- x0_y2$copy()
load('/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/x0_y2.RData')
x0_y2_c$plotTrackList()
#rm(list=ls())
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150806/'
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/'
#wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,1,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)])
}
}
plotData(dataNames, col=col, lty=lty, PEG=TRUE)
#rm(list=ls())
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150806/'
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/'
#wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(2,1,1,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)])
}
}
plotData(dataNames, col=col, lty=lty, PEG=TRUE)
duh <- getSweep()
plot(duh$t, duh$f, type='l', xlab='Time [s]', ylab='Voltage [V]')
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
duh <- getSweep(fi=0.01, ff=0.01)
duh <- getSweep(fi=0.01, ff=0.002)
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
duh <- getSweep(fi=0.1, ff=0.01)
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
duh <- getSweep(fi=0.1, ff=0.01, sin=T)
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
duh <- getSweep(fi=0.1, ff=0.01)
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
duh <- getSweep(fi=0.1, ff=0.01, sin=T)
plot(duh$t, duh$x, type='l', xlab='Time [s]', ylab='Voltage [V]')
rm(list=ls())
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
results <- list()
for(wellName in wellNames)
{
wellName2 <- paste0(wellName, '_c')
load(paste0(path, wellName2, '.RData'))
assign(wellName2, get(wellName)$copy())
results[[wellName2]] <- get(wellName2)$getPercentAdhered()
pdf(file=paste0(path,wellName2,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName2]]$time, results[[wellName2]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName2, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
load(paste0(path, wellName, '.RData'))
assign(wellName, get(wellName)$copy())
results[[wellName]] <- get(wellName)$getPercentAdhered()
pdf(file=paste0(path,wellName,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName]]$time, results[[wellName]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
}
# Clear the workspace of any data, variables, and functions that are currently loaded.
#rm(list=ls())
#source("http://bioconductor.org/biocLite.R")
#biocLite('GraphAlignment')
# Load the functions that we'll be using.
#source('C:/Users/biomems/Documents/GitHub/R-Adhesion/Tracking.R')
#source('C:/Users/biomems/Documents/GitHub/R-Adhesion/OOTracking.R')
source('~/.Rprofile')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/LAPJV.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/Tracking.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/TrackList.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/Track.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/TrackList.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/Track.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/Maxima.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/MaximaList.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/TrackFilters.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/TrackFitting.R')
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/R/PackageFunctions.R')
results <- list()
for(wellName in wellNames)
{
wellName2 <- paste0(wellName, '_c')
load(paste0(path, wellName2, '.RData'))
assign(wellName2, get(wellName)$copy())
results[[wellName2]] <- get(wellName2)$getPercentAdhered()
pdf(file=paste0(path,wellName2,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName2]]$time, results[[wellName2]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName2, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
load(paste0(path, wellName, '.RData'))
assign(wellName, get(wellName)$copy())
results[[wellName]] <- get(wellName)$getPercentAdhered()
pdf(file=paste0(path,wellName,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName]]$time, results[[wellName]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
}
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(2,1,1,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)])
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
source('~/Public/DropBox/GitHub/R-Adhesion/CellTracking/RunTestAnalysis3.R', echo=TRUE)
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,2,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], cex=2)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], cex=2)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,2,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], cex=5)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], cex=5)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], lwd=3)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=FALSE)
#rm(list=ls())
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150806/'
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/'
#wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,2,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], lwd=3)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=TRUE)
#rm(list=ls())
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150806/'
#path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM FACS/20150812/'
#wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,2,1,2,1,1,1)
plotData <- function(dataNames, xlim=c(0,300), ylim=c(0,70), xlab='Shear Stress [Pa]', ylab='Percent Adhered [%]', col=gray(seq(0.2,0.8,0.6/length(dataNames))), lty=rep(1, length(dataNames)), PEG=TRUE)
{
if(PEG)
{
mu <- 0.0052
}
else
{
mu <- 0.00078
}
tANDf <- getFrequencies(t=xlim)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=500, mu=mu)
plot(c(), c(), xlim=tau, ylim=ylim, xlab=xlab, ylab=ylab, log='x')
for(dataName in dataNames)
{
amplitude <- max(as.numeric(get(dataName)$getProp(fun=function(x){r <- x$range('x', rel=TRUE); r <- (r[2]-r[1])/2; return(r)})))
results <- get(dataName)$getPercentAdhered()
tANDf <- getFrequencies(t=results$time)
tau <- getShearStress(f=tANDf$f, pixelAmplitude=amplitude, mu=mu)
temp <- smooth.spline(tau, results$percentAdhered, spar=0.5)
#points(tau, results$percentAdhered, pch=20, cex=0.75)
lines(temp$x, temp$y, type='l', col=col[which(dataNames %in% dataName)], lty=lty[which(dataNames %in% dataName)], lwd=3)
}
}
plotData(dataNames[1], col=col, lty=lty, PEG=TRUE)
plotData(dataNames, col=col, lty=lty, PEG=TRUE)
x0_y0$plotTrackList()
x0_y1$plotTrackList()
x0_y2$plotTrackList()
trackList <- x0_y1
bestFit <- getBulkPhaseShift(trackList, tiGuess=0)
trackList$setValidFrames(fit=bestFit, validStart=0.1, validEnd=0.9)
fitCurveData <- getSweep(amplitude=bestFit$par[['amplitude']], phaseShift=bestFit$par[['phaseShift']], sweepDuration=(1/bestFit$par[['timeScalingFactor']])*trackList$sweepDuration, offset=0, sin=trackList$sin, ti=bestFit$par[['ti']], fi=trackList$fi, ff=trackList$ff, t=trackList$tAll, guess=NULL)
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-50,50), validOnly=FALSE, xlim=c(125,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
path <- '/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/'
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames <- c('x0_y0', 'x0_y1', 'x0_y2', 'x0_y3', 'x0_y4', 'x0_y5', 'x0_y6', 'x0_y7')
wellNames2 <- paste0(wellNames, '_c')
dataNames <- wellNames2
col <- c(rgb(1,0,0), rgb(1,0,0), rgb(1,0,0), gray(0), gray(0), gray(0), rgb(1,0,0), rgb(1,0,0))
lty <- c(1,1,2,1,2,1,1,1)
results <- list()
for(wellName in wellNames)
{
wellName2 <- paste0(wellName, '_c')
load(paste0(path, wellName2, '.RData'))
assign(wellName2, get(wellName)$copy())
results[[wellName2]] <- get(wellName2)$getPercentAdhered()
pdf(file=paste0(path,wellName2,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName2]]$time, results[[wellName2]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName2, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
load(paste0(path, wellName, '.RData'))
assign(wellName, get(wellName)$copy())
results[[wellName]] <- get(wellName)$getPercentAdhered()
pdf(file=paste0(path,wellName,'_PercentAdhered.pdf'), width=6, height=5)
plot(results[[wellName]]$time, results[[wellName]]$percentAdhered, xlab='Time [s]', ylab='Percent Adhered [%]', main=wellName, pch=20, cex=0.75, ylim=c(0,70))
dev.off()
}
trackList <- x0_y7
bestFit <- getBulkPhaseShift(trackList, tiGuess=0)
fitCurveData <- getSweep(amplitude=bestFit$par[['amplitude']], phaseShift=bestFit$par[['phaseShift']], sweepDuration=(1/bestFit$par[['timeScalingFactor']])*trackList$sweepDuration, offset=0, sin=trackList$sin, ti=bestFit$par[['ti']], fi=trackList$fi, ff=trackList$ff, t=trackList$tAll, guess=NULL)
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-50,50), validOnly=FALSE, xlim=c(125,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList <- x0_y0
bestFit <- getBulkPhaseShift(trackList, tiGuess=0)
fitCurveData <- getSweep(amplitude=bestFit$par[['amplitude']], phaseShift=bestFit$par[['phaseShift']], sweepDuration=(1/bestFit$par[['timeScalingFactor']])*trackList$sweepDuration, offset=0, sin=trackList$sin, ti=bestFit$par[['ti']], fi=trackList$fi, ff=trackList$ff, t=trackList$tAll, guess=NULL)
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-50,50), validOnly=FALSE, xlim=c(125,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
trackList <- x0_y1
bestFit <- getBulkPhaseShift(trackList, tiGuess=0)
fitCurveData <- getSweep(amplitude=bestFit$par[['amplitude']], phaseShift=bestFit$par[['phaseShift']], sweepDuration=(1/bestFit$par[['timeScalingFactor']])*trackList$sweepDuration, offset=0, sin=trackList$sin, ti=bestFit$par[['ti']], fi=trackList$fi, ff=trackList$ff, t=trackList$tAll, guess=NULL)
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-50,50), validOnly=FALSE, xlim=c(125,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='x', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
trackList$plotTrackList(slot='x', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
load("/Users/jaywarrick/Documents/MMB/Projects/Adhesion/MM AMD/20150724/Mystery/TL_20150724_0.RData")
trackList <- TL_20150724_0
bestFit <- getBulkPhaseShift(trackList, tiGuess=0)
fitCurveData <- getSweep(amplitude=bestFit$par[['amplitude']], phaseShift=bestFit$par[['phaseShift']], sweepDuration=(1/bestFit$par[['timeScalingFactor']])*trackList$sweepDuration, offset=0, sin=trackList$sin, ti=bestFit$par[['ti']], fi=trackList$fi, ff=trackList$ff, t=trackList$tAll, guess=NULL)
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,5))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-50,50), validOnly=FALSE, xlim=c(125,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='vx', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
lines(fitCurveData$t, fitCurveData$v, col='red')
trackList$plotTrackList(slot='x', rel=TRUE, ylim=c(-500,500), validOnly=FALSE, xlim=c(0,300))
trackList$plotTrackList(slot='x', rel=TRUE, ylim=c(-250,250), validOnly=FALSE, xlim=c(0,300))
